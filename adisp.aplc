:Class adisp
  (⎕IO ⎕ML)←0 1

  :Field Public  hr
  :Field Private id←''
  :Field Private stop←0
  :Field Private size←0 0

  :Field Private Shared ReadOnly LOAD←18<⍎⊃'.'(≠⊆⊢)1⊃#⎕WG'APLVersion'

  Html←{
    h←'<!DOCTYPE html><html>'
    h,←'<head><title>Array Display</title><meta charset="UTF-8">'
    h,←'<style>*{margin:0;padding:0;background-color:black;}'
    h,←'div{display:grid;height:100%;}canvas{margin:auto;'
    h,←'object-fit:contain;image-rendering:pixelated;'
    h,←'width:100%;height:100vh;}</style></head>'
    h,←'<body><div><canvas id="MyCanvas"></canvas></div><script>'
    h,←{LOAD: '' ⋄ Js 0}0
    h,←'</script></body></html>'
    h
  }

  Js←{
    h←''
    h,←'const socket = new WebSocket("ws://dyalog_root/");'
    h,←'socket.binaryType = "arraybuffer";'
    h,←'const canvas = document.getElementById("MyCanvas");'
    h,←'canvas.addEventListener("contextmenu", e => {'
    h,←' e.preventDefault();'
    h,←'});'
    h,←'const ctx = canvas.getContext("2d");'
    h,←'let img = new ImageData(canvas.width, canvas.height);'
    h,←'socket.addEventListener("message", e => {'
    h,←' if (typeof e.data === "string") {'
    h,←'  const [h, w] = JSON.parse(e.data);'
    h,←'  canvas.height = h;'
    h,←'  canvas.width = w;'
    h,←' } else if (e.data instanceof ArrayBuffer) {'
    h,←'  const buf = e.data;'
    h,←'  const arr = new Uint8ClampedArray(buf, 0, buf.byteLength-4);'
    h,←'  img = new ImageData(arr, canvas.width);'
    h,←' }'
    h,←'});'
    h,←'const draw = t => {'
    h,←' ctx.putImageData(img, 0, 0);'
    h,←' window.requestAnimationFrame(draw);'
    h,←'};'
    h,←'window.requestAnimationFrame(draw);'
    h
  }

  ∇ t←New args
    :Access Public Shared
    t←⎕NEW ⎕THIS args
  ∇

  ∇ w←Window win_size
    :Access Public Shared
    w←New('Coord' 'Pixel')('Size'win_size)
  ∇

  ∇ w←window
    :Access Public Shared
    w←New ⍬
  ∇

  ∇ b←isClosed
    :Access Public
    b←stop
  ∇

  ∇ OnLoad arg;r
    :Access Private
    hr.ExecuteJavaScript Js 0
  ∇

  ∇ OnUpgrade arg
    :Access Private
    id←2⊃arg
  ∇

  ∇ OnClose arg
    :Access Private
    stop←1
  ∇

  ∇ MakeWindow args;ev;pa;msg
    :Access Public
    :Implements Constructor
    ev←('WebSocketUpgrade' 'OnUpgrade')('Close' 'OnClose')
    :If LOAD
      ev,←⊂'LoadEnd' 'OnLoad'
    :EndIf
    pa←('Event',⍥⊆ev)('HTML'(Html 0)),args
    {_←'hr'⎕WC'HTMLRenderer',⍥⊆⍵ ⋄ ⎕DQ'hr'}&pa
    :While (id≡'')∧stop≢1 ⋄ ⎕DL 0.01 ⋄ :EndWhile
  ∇

  I32FromI8←{323 ⎕DR ⍵,4⍴¯128}
  I8FromI32←{83 ⎕DR ⍵,¯2147483648}

  ∇ r←Draw img;new_size
    :Access Public
    r←0
    :If stop≡1 ⋄ :Return ⋄ :EndIf
    new_size←2↑⍴img
    :If 0≡×/new_size
      ('image shape: ',⍕⍴img)⎕SIGNAL 5
    :EndIf
    :If new_size≢size
      r←{6::0 ⋄ 1⊣hr.WebSocketSend id ⍵ 1 1}1 ⎕JSON new_size
      size←new_size
    :EndIf
    r←{6::0 ⋄ 1⊣hr.WebSocketSend id ⍵ 1 2}I8FromI32,img
  ∇

  ∇ r←RGBA x;s
    :Access Public Shared
    s←¯1↓⍴x
    r←s⍴I32FromI8,¯128+256|128+⌊255×x
  ∇

  ∇ r←RGB x;s
    :Access Public Shared
    s←¯1↓⍴x
    r←s⍴I32FromI8,(,∘¯1⍤1)¯128+256|128+⌊255×x
  ∇

  ∇ r←Gray x;s
    :Access Public Shared
    s←⍴x
    r←s⍴I32FromI8,((¯1,⍨3∘⍴)⍤0)¯128+256|128+⌊255×x
  ∇

  FromHex←(16 16⊥'0123456789ABCDEF'⍳⊢)⍤1

  ∇ r←Hex x
    :Access Public Shared
    x←1 ⎕C x
    :Select ≢x
    :Case 3 ⋄ x←255,⍨FromHex 3 1⍴x
    :Case 6 ⋄ x←255,⍨FromHex 3 2⍴x
    :Case 4 ⋄ x←FromHex 4 1⍴x
    :Case 8 ⋄ x←FromHex 4 2⍴x
    :Else ⋄ ⎕SIGNAL 5
    :EndSelect
    r←⊃I32FromI8 ¯128+256|128+x
  ∇

  ∇ r←ToRGBA x;s
    :Access Public Shared
    s←(⍴x),4
    r←255÷⍨256|s⍴I8FromI32,x
  ∇

:EndClass
